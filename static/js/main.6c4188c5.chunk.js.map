{"version":3,"sources":["components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","components/Expenses/ExpenseDate.js","components/UI/Card.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesFilter.js","components/Expenses/Expenses.js","App.js","index.js"],"names":["ExpenseForm","props","useState","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","event","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","className","type","value","onChange","target","min","step","max","NewExpense","enteredExpenseData","id","Math","random","toString","onAddExpense","ExpenseDate","month","toLocaleString","day","year","getFullYear","Card","classes","children","ExpenseItem","ExpensesFilter","selected","onChangeFilter","Expenses","filteredYear","setFilteredYear","selectedYear","items","map","expenses","DUMMY_EXPENSES","App","setExpenses","expense","prevExpenses","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c4188c5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\n// Importing SASS Styles\nimport \"../../scss/ExpenseForm.scss\";\n\nfunction ExpenseForm(props) {\n  // using multiple useState in multiple Variables\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n\n  // using one state Method instead of multiple useState\n  // const [userInput, setUserInput] = useState({\n  //   enteredTitle: \"\",\n  //   enteredAmount: \"\",\n  //   enteredDate: \"\",\n  // });\n\n  const titleChangeHandler = (event) => {\n    // using multiple useState\n    setEnteredTitle(event.target.value);\n    ////////////////////////\n    // using one state Method instead of multiple useState\n    // this way is not a good practice, because it might fail\n    // setUserInput({\n    //   ...userInput, // spread operator\n    //   enteredTitle: event.target.value,\n    // });\n    // the more efficient way would be function inside a function\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredTitle: event.target.value };\n    // });\n  };\n\n  const amountChangeHandler = (event) => {\n    // using multiple useState\n    setEnteredAmount(event.target.value);\n    ////////////////////////\n    // using one state Method instead of multiple useState\n    // this way is not a good practice, because it might fail\n    // setUserInput({\n    //   ...userInput, // spread operator\n    //   enteredAmount: event.target.value,\n    // });\n    // the more efficient way would be function inside a function\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredAmount: event.target.value };\n    // });\n  };\n\n  const dateChangeHandler = (event) => {\n    // using multiple useState\n    setEnteredDate(event.target.value);\n    ////////////////////////\n    // using one state Method instead of multiple useState\n    //  this way is not a good practice, because it might fail\n    // setUserInput({\n    //   ...userInput, // spread operator\n    //   enteredDate: event.target.value,\n    // });\n    // the more efficient way would be function inside a function\n    // setUserInput((prevState) => {\n    //   return { ...prevState, enteredDate: event.target.value };\n    // });\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate),\n    };\n    props.onSaveExpenseData(expenseData);\n    // The two way Binding to clear the input of the user after he/she submits\n    // Step 1\n    setEnteredTitle(\"\");\n    setEnteredAmount(\"\");\n    setEnteredDate(\"\");\n    // step 2 you add a value into the input you wanna reset after a submission Example: value={enteredTitle}\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={enteredTitle}\n            onChange={titleChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            value={enteredAmount}\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            value={enteredDate}\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n}\n\nexport default ExpenseForm;\n","import React from \"react\";\n\n// Importing Components\nimport ExpenseForm from \"./ExpenseForm\";\n\n// Importing SASS Styles\nimport \"../../scss/NewExpense.scss\";\n\nconst NewExpense = (props) => {\n  const saveExpenseDataHandler = (enteredExpenseData) => {\n    const expenseData = {\n      ...enteredExpenseData,\n      id: Math.random().toString(),\n    };\n    props.onAddExpense(expenseData);\n  };\n\n  return (\n    <div className=\"new-expense\">\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\n    </div>\n  );\n};\n\nexport default NewExpense;\n","import React from \"react\";\n// Importing SASS Styles\nimport \"../../scss/ExpenseDate.scss\";\n\nconst ExpenseDate = (props) => {\n  const month = props.date.toLocaleString(\"ar-EG\", { month: \"long\" });\n  const day = props.date.toLocaleString(\"en-EG\", { day: \"2-digit\" });\n  const year = props.date.getFullYear();\n\n  return (\n    <div className=\"expense-date\">\n      <div className=\"expense-date__month\">{month}</div>\n      <div className=\"expense-date__year\">{year}</div>\n      <div className=\"expense-date__day\">{day}</div>\n    </div>\n  );\n};\n\nexport default ExpenseDate;\n","import React from \"react\";\n// Importing SASS Styles\nimport \"../../scss/Card.scss\";\n\nconst Card = (props) => {\n  const classes = \"card \" + props.className;\n\n  return <div className={classes}> {props.children} </div>;\n};\n\nexport default Card;\n","import React from \"react\";\n// Importing components\nimport ExpenseDate from \"./ExpenseDate\";\nimport Card from \"../UI/Card\";\n\n// Importing SASS Styles\nimport \"../../scss/ExpenseItem.scss\";\n\nconst ExpenseItem = (props) => {\n  return (\n    <Card className=\"expense-item\">\n      <ExpenseDate date={props.date} />\n      <div className=\"expense-item__description\">\n        <h2>{props.title}</h2>\n        <div className=\"expense-item__price\">${props.amount}</div>\n      </div>\n    </Card>\n  );\n};\n\nexport default ExpenseItem;\n","import React from \"react\";\n\n// Importing SASS Styles\nimport \"../../scss/ExpensesFilter.scss\";\n\nconst ExpensesFilter = (props) => {\n  const dropDownChangeHandler = (event) => {\n    props.onChangeFilter(event.target.value);\n  };\n\n  return (\n    <div className=\"expenses-filter\">\n      <div className=\"expenses-filter__control\">\n        <label>Filter by year</label>\n        <select value={props.selected} onChange={dropDownChangeHandler}>\n          <option value=\"2022\">2022</option>\n          <option value=\"2021\">2021</option>\n          <option value=\"2020\">2020</option>\n          <option value=\"2019\">2019</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpensesFilter;\n","import React, { useState } from \"react\";\n// Importing Components\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\n\n// Importing SASS Styles\nimport \"../../scss/Expense.scss\";\n\nconst Expenses = (props) => {\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\n\n  const filterChangeHandler = (selectedYear) => {\n    setFilteredYear(selectedYear);\n  };\n\n  return (\n    <Card className=\"expenses\">\n      <ExpensesFilter\n        selected={filteredYear}\n        onChangeFilter={filterChangeHandler}\n      />\n      {props.items.map((expenses) => (\n        <ExpenseItem\n          title={expenses.title}\n          amount={expenses.amount}\n          date={expenses.date}\n        />\n      ))}\n    </Card>\n  );\n};\n\nexport default Expenses;\n","import React, { useState } from \"react\";\n// Importing Components\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport Expenses from \"./components/Expenses/Expenses\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"ورق التواليت\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  {\n    id: \"e2\",\n    title: \"تلفزيون جديد\",\n    amount: 799.49,\n    date: new Date(2021, 2, 12),\n  },\n  {\n    id: \"e3\",\n    title: \"تأمين السيارة\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"مكتب جديد (خشبي)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nconst App = () => {\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n\n  const addExpenseHandler = (expense) => {\n    // this is the clean way of updating our useState when it is based on older Snapshot.\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    });\n  };\n\n  // React under the hood version which is old\n\n  // return React.createElement(\n  //   \"div\",\n  //   {},\n  //   React.createElement(\"h2\", {}, \"Let's get Started<\"),\n  //   React.createElement(Expenses, { items: expenses })\n  // );\n\n  // More friendly readable JSX React Code\n\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses items={expenses} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// Importing Sass\nimport \"./scss/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}